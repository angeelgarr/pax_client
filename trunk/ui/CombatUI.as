package ui {		import flash.display.MovieClip;	import fl.text.TLFTextField;	import flash.events.MouseEvent;	import game.unit.events.UnitEvent;	import game.battle.BattleEventDispatcher;	import game.battle.Battle;	import game.unit.Unit;	import game.entity.Army;	import game.Game;	import flash.utils.Dictionary;	import game.unit.events.UnitDestroyEvent;	import game.unit.events.UnitDamageEvent;	import game.Item;	import game.entity.Entity;	import ui.events.GameEvents;	import stats.UnitTemplate;	import net.packet.BattleDamage;			public class CombatUI extends MovieClip 	{		public static var INIT_X:int = 3;		public static var INIT_Y:int = 3;		public static var SPACE_Y:int = 3;						public static var ICON_X_SPACER:int = 5;		public static var ICON_Y_SPACER:int = 5;		public static var ICON_X_START:int = 5;		public static var ICON_Y_START:int = 5;							public var battleMapText:TLFTextField;		public var combatLogText:TLFTextField;		public var inventoryText:TLFTextField;				public var attackButton:ContractButton;		public var retreatButton:ContractButton;		public var changeTargetButton:ContractButton;				public var battleMap:MovieClip;		public var combatLog:CombatLog;		public var battlefieldItems:MovieClip;				public var closeButton:CloseButton;				private var battle:Battle;		private var selectedArmy:Army;				private var iconUnits:Dictionary = new Dictionary();		private var iconItems = new Array();				private var numUnits:int;					private var numPlayerSoldiers:int;		private var numPlayerKilled:int;		private var numPlayerReserve:int;				public function CombatUI() 		{			battleMapText.addEventListener(MouseEvent.CLICK, battleMapTextClick);			combatLogText.addEventListener(MouseEvent.CLICK, combatLogTextClick);			inventoryText.addEventListener(MouseEvent.CLICK, inventoryTextClick);						attackButton.addEventListener(MouseEvent.CLICK, attackButtonClick);			retreatButton.addEventListener(MouseEvent.CLICK, retreatButtonClick);			changeTargetButton.addEventListener(MouseEvent.CLICK, changeTargetButtonClick);						attackButton.buttonName.text = "Attack";			retreatButton.buttonName.text = "Retreat";			changeTargetButton.buttonName.text = "Change Target";									BattleEventDispatcher.INSTANCE.addEventListener(UnitEvent.DESTROYED, unitDestroyed);            BattleEventDispatcher.INSTANCE.addEventListener(UnitEvent.DAMAGED, unitDamaged);								UIEventDispatcher.INSTANCE.addEventListener(GameEvents.SuccessTransferItem, itemTransfered);						closeButton.addEventListener(MouseEvent.CLICK, closeButtonClick);		}				public function init() : void		{			this.visible = false;		}				public function showPanel() : void		{			this.visible = true;		}				public function setBattle(battle:Battle) : void		{			this.battle = battle;						setArmies();			setItems();		}						public function setArmies() : void		{			//Clear old units			clearUnits();			            numUnits = 0;						var numPlayerUnits:int = 0;			var numEnemyUnits:int = 0;			var numUnitsSpacer:int = 0;						//Total number of soldiers in all units			numPlayerSoldiers = 0;			numPlayerKilled = 0;			numPlayerReserve = 0;						for (var i:int = 0; i < battle.armies.length; i++)            {                var army:Army = battle.armies[i];											if(army.playerId == Game.INSTANCE.player.id)				{					selectedArmy = army;				}								trace("CombatUI - Army: " + army.id + " " + army.armyName);				trace("army.units: " + army.units);				                for each (var unit:Unit in army.units)                {					trace("Unit: " + unit.id);					var iconUnit:IconUnit = new IconUnit();					iconUnit.setUnit(unit);                    if (unit.parentEntity.playerId == Game.INSTANCE.player.id)                    {						trace("Set Player Unit");                        iconUnit.x = INIT_X;						numPlayerUnits++;						numUnitsSpacer = numPlayerUnits;												numPlayerSoldiers += unit.size;                    }									else					{						trace("Set Enemy Unit");                        iconUnit.x = battleMap.width - INIT_X - iconUnit.width;						numEnemyUnits++;						numUnitsSpacer = numEnemyUnits;											}										iconUnit.addEventListener(MouseEvent.CLICK, unitClick);		                    iconUnit.y = INIT_Y + (numUnitsSpacer * (iconUnit.height + SPACE_Y));                    battleMap.addChild(iconUnit);                    iconUnits[unit.id] = iconUnit;                    numUnits++;				}			}		}				public function setItems() : void		{			removeItems();						for(var i = 0; i < battle.items.length; i++)			{				var item:Item = Item(battle.items[i]);				var iconItem:IconItem = new IconItem();								iconItem.setItem(item);				iconItem.x = ICON_X_START + (i % 7) * (iconItem.width + ICON_X_SPACER);				iconItem.y = ICON_Y_START + int(i / 7) * (iconItem.height + ICON_Y_SPACER);				iconItem.anchorX = iconItem.x;				iconItem.anchorY = iconItem.y;									iconItem.addEventListener(MouseEvent.MOUSE_DOWN, itemMouseDown);				iconItem.addEventListener(MouseEvent.MOUSE_UP, itemMouseUp);															battlefieldItems.addChild(iconItem);								iconItems.push(iconItem);							}		}						private function clearUnits() : void		{			for each(var iconUnit:IconUnit in iconUnits)			{				if(battleMap.contains(iconUnit))					battleMap.removeChild(iconUnit);			}						iconUnits = new Dictionary();		}						private function unitClick(e:MouseEvent) : void		{					}						private function battleMapTextClick(e:MouseEvent) : void		{			battleMap.visible = true;			combatLog.visible = false;				battlefieldItems.visible = false;		}				private function combatLogTextClick(e:MouseEvent) : void		{			battleMap.visible = false;			combatLog.visible = true;			battlefieldItems.visible = false;		}				private function inventoryTextClick(e:MouseEvent) : void		{			battleMap.visible = false;			combatLog.visible = false;			battlefieldItems.visible = true;		}				private function attackButtonClick(e:MouseEvent) : void		{					}				private function retreatButtonClick(e:MouseEvent) : void		{						var parameters:Object = {battleId: battle.id,									 armyId: selectedArmy.id};									 			var pEvent:ParamEvent = new ParamEvent(Game.battleRetreatEvent);			pEvent.params = parameters;						Game.INSTANCE.dispatchEvent(pEvent);		}						private function changeTargetButtonClick(e:MouseEvent) : void		{					}					        private function unitDestroyed(e:UnitDestroyEvent) : void        {			trace("BattleUI - unitDestroyed");			            var iconUnit:IconUnit = iconUnits[e.unitId];            if(iconUnit != null)                if (battleMap.contains(iconUnit))                    battleMap.removeChild(iconUnit);        }		        private function unitDamaged(e:UnitDamageEvent) : void        {            trace("BattleUI - unitDamaged");			var battleDamage:BattleDamage = e.battleDamage			var iconUnit:IconUnit = iconUnits[battleDamage.targetUnitId];							var sourceUnit:Unit = battle.getUnit(battleDamage.sourceArmyId, 												 battleDamage.sourceUnitId);															trace("Getting targetUnit: " + battleDamage.targetArmyId + " " + battleDamage.targetUnitId);			var targetUnit:Unit = battle.getUnit(battleDamage.targetArmyId,												 battleDamage.targetUnitId);															trace("targetUnit: " + targetUnit.templateId);															var sourceTemplate:UnitTemplate = Stats.INSTANCE.getUnitTemplate(sourceUnit.templateId)			var targetTemplate:UnitTemplate = Stats.INSTANCE.getUnitTemplate(targetUnit.templateId);						var damageMessage:String = "";			var numKilled:int = int(battleDamage.damage / targetTemplate.hp);			var numKilledStr:String = "";						if(numKilled > targetUnit.size)				numKilledStr = "Unit destroyed."			else				numKilledStr = numKilled + " units killed.";						damageMessage = sourceUnit.name + " hits " + 							targetUnit.name + ".  " + 							battleDamage.damage + " Physical.  " + 							numKilledStr;										//Update player num soldiers			if (targetUnit.parentEntity.playerId == Game.INSTANCE.player.id)			{				numPlayerSoldiers -= numKilled;				numPlayerKilled += numKilled;				updateNumSoldiers();			}						            combatLog.combatLogText.htmlText += damageMessage;						if(iconUnit != null)				iconUnit.updateStackSize();				}					private function itemTransfered(e:ParamEvent) : void		{			trace("CombatUI itemTransfered");			if(this == Game.INSTANCE.lastTransferItem.sourceUI ||			   this.contains(Game.INSTANCE.lastTransferItem.targetUI))			{				Game.INSTANCE.requestInfo(Entity.BATTLE, battle.id);			}		}				private function itemMouseDown(e:MouseEvent) : void		{			trace("itemMouseDown");			this.parent.setChildIndex(this, this.parent.numChildren - 1);				e.stopPropagation();						var iconItem:IconItem = IconItem(e.currentTarget);						iconItem.anchorX = x;			iconItem.anchorY = y;									iconItem.startDrag();			iconItem.dragging = true;			iconItem.parent.setChildIndex(iconItem, iconItem.parent.numChildren - 1);					}				private function itemMouseUp(e:MouseEvent) : void		{			trace("itemMouseUp");			this.parent.setChildIndex(this, this.parent.numChildren - 1);				e.stopPropagation();						var iconItem:IconItem = IconItem(e.currentTarget);						iconItem.stopDrag()				iconItem.dragging = false;						iconItem.x = iconItem.anchorX;			iconItem.y = iconItem.anchorY;							trace("iconItem.dropTarget: " + iconItem.dropTarget);						var parameters:Object = {itemId: iconItem.item.id,									 sourceId: battle.id,									 sourceType: Entity.BATTLE,									 sourceUI: this,									 targetUI: iconItem.dropTarget};						var pEvent:ParamEvent = new ParamEvent(Game.transferItemEvent);			pEvent.params = parameters;			Game.INSTANCE.dispatchEvent(pEvent);							}						private function removeItems() : void		{			for(var i = 0; i < iconItems.length; i++)			{				var iconItem:IconItem = iconItems[i];								if(battlefieldItems.contains(iconItem))						{					iconItem.stackSize = null;					iconItem.item = null;											battlefieldItems.removeChild(iconItem);				}			}						iconItems = new Array();		}				private function updateNumSoldiers() : void		{			combatLog.numPlayerSoldiersText.htmlText = 			numPlayerSoldiers + " soldiers, " + 											  		   numPlayerKilled + " killed, " + 											  		   numPlayerReserve + " reserve";											  		}				private function closeButtonClick(e:MouseEvent) : void		{			this.visible = false;		}	}	}